//  Given two strings s and t which consist of only lowercase letters.

// String t is generated by random shuffling string s and then add one more
// letter at a random position.

// Find the letter that was added in t.

// Example:

// Input:
// s = "abcd"
// t = "abcde"

// Output:
// e

// Explanation:
// 'e' is the letter that was added.

class Solution {
  public:
    char findTheDifference(string s, string t) {
        // ask
        // dose the string has duplicate first
        // is the string sorted?

        unordered_map<char, int> smap; // char, counter

        for (auto &&cs : s)
            ++smap[cs];

        for (auto &&ct : t)
            if (--smap[ct] < 0)
                return ct;

        return '0'; // invalid input handling
    }
};

// other idea
// somehow like find the single existance of a single number while others are
// duplicates
class Solution {
  public:
    char findTheDifference(string s, string t) {
        if (s.empty())
            return t[0];

        char ret = t.back();

        for (int i = 0; i < s.size(); ++i)
            ret ^= s[i] ^= t[i];

        return ret;
    }
};